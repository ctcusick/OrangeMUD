/******************************************************************************  Author: Matthew Nolan                                      OrangeMUD Codebase    Date: January 2001                                          [Crossplatform] License: MIT LicensePermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.Copyright 2000-2019 Matthew Nolan, All Rights Reserved******************************************************************************/#include "CommonTypes.h"#include "MapGenerator.h"#include "RoomIndex.h"/* __|  |*/MapGenerator::MapGenerator(RoomIndex* hStart, SHORT hWidth, SHORT hHeight)    : mRoom(hStart)    , mWidth(hWidth)    , mHeight(hHeight)    , mGrid(NULL){}MapGenerator::~MapGenerator(){    if(mGrid)        delete [] mGrid;}void MapGenerator::Generate(STRINGCW& intoString){    //Allocate GridMap    mGridRows       = 1 + (4*mHeight);    mGridColumns    = 1 + (4*mWidth);    mGridRowBytes   = 1 + (4*mWidth);    mGridSize       = mGridRows * mGridRowBytes;    mGrid           = new BYTE[mGridSize];    memset(mGrid, eTileEmpty, mGridSize);            //Fill GridMap with tile info    MapPoint nCenterPoint(2*mWidth, 2*mHeight);    SHORT nSearchDepths[kDirMax];    nSearchDepths[kDirNorth]= mHeight;    nSearchDepths[kDirEast] = mWidth;    nSearchDepths[kDirSouth]= mHeight;    nSearchDepths[kDirWest] = mWidth;    nSearchDepths[kDirUp]   = 0;    nSearchDepths[kDirDown] = 0;    Scan(mRoom, nCenterPoint, nSearchDepths);    SetTile(nCenterPoint, eTileYouAreHere);        //Generate string based on GridMap      for(LONG i = 0; i < mGridRows; ++i)    {        intoString += GenRow(i);        intoString += "\n";    }}void MapGenerator::Scan(RoomIndex* hFrom, MapPoint hAtPos, SHORT hSearchDepths[]){    ASSERT(hFrom != NULL);    if(mScannedRooms.Exists(hFrom))        return;            SetTile(hAtPos, eTileRoom);    mScannedRooms[hFrom] = true;        if(hSearchDepths[kDirNorth] > 0 && hFrom->mExits[kDirNorth])    {        MapPoint northExitPt(hAtPos.x, hAtPos.y-1);        MapPoint northRoomPt(hAtPos.x, hAtPos.y-2);        SHORT nNewDepths[kDirMax];        memcpy(nNewDepths, hSearchDepths, sizeof(SHORT)*kDirMax);        nNewDepths[kDirNorth]--;        nNewDepths[kDirSouth]++;        SetTile(northExitPt, eTileNSHallway);        Scan(hFrom->mExits[kDirNorth]->mToRoom, northRoomPt, nNewDepths);    }    if(hSearchDepths[kDirEast] > 0 && hFrom->mExits[kDirEast])    {        MapPoint eastExitPt(hAtPos.x+1, hAtPos.y);        MapPoint eastRoomPt(hAtPos.x+2, hAtPos.y);        SHORT nNewDepths[kDirMax];        memcpy(nNewDepths, hSearchDepths, sizeof(SHORT)*kDirMax);        nNewDepths[kDirEast]--;        nNewDepths[kDirWest]++;        SetTile(eastExitPt, eTileEWHallway);        Scan(hFrom->mExits[kDirEast]->mToRoom, eastRoomPt, nNewDepths);    }    if(hSearchDepths[kDirSouth] > 0 && hFrom->mExits[kDirSouth])    {        MapPoint southExitPt(hAtPos.x, hAtPos.y+1);        MapPoint southRoomPt(hAtPos.x, hAtPos.y+2);        SHORT nNewDepths[kDirMax];        memcpy(nNewDepths, hSearchDepths, sizeof(SHORT)*kDirMax);        nNewDepths[kDirSouth]--;        nNewDepths[kDirNorth]++;        SetTile(southExitPt, eTileNSHallway);        Scan(hFrom->mExits[kDirSouth]->mToRoom, southRoomPt, nNewDepths);    }        if(hSearchDepths[kDirWest] > 0 && hFrom->mExits[kDirWest])    {        MapPoint westExitPt(hAtPos.x-1, hAtPos.y);        MapPoint westRoomPt(hAtPos.x-2, hAtPos.y);        SHORT nNewDepths[kDirMax];        memcpy(nNewDepths, hSearchDepths, sizeof(SHORT)*kDirMax);        nNewDepths[kDirWest]--;        nNewDepths[kDirEast]++;        SetTile(westExitPt, eTileEWHallway);        Scan(hFrom->mExits[kDirWest]->mToRoom, westRoomPt, nNewDepths);    }}BYTE& MapGenerator::AtPt(MapPoint& hPt){    ASSERT(hPt.x >= 0 && hPt.x <= mGridColumns);    ASSERT(hPt.y >= 0 && hPt.y <= mGridRows);    return mGrid[(hPt.y*mGridRowBytes)+hPt.x];}void MapGenerator::SetTile(MapPoint hPos, eTileType hType){    BYTE& nTileSpot = AtPt(hPos);    nTileSpot = hType;}eTileType MapGenerator::GetTile(MapPoint hPos){    BYTE& nTileSpot = AtPt(hPos);    return (eTileType) nTileSpot;}STRINGCW MapGenerator::GenRow(LONG hRow){    STRINGCW nString;    eTileType nTileType;        for(LONG i = 0; i < mGridColumns; ++i)    {        nTileType = GetTile(MapPoint(i, hRow));        switch(nTileType)        {            case eTileEmpty:                nString += " ";                break;            case eTileRoom:                nString += "*";                break;            case eTileEWHallway:                nString += "-";                break;            case eTileNSHallway:                nString += "|";                break;            case eTileYouAreHere:                nString += "^!^r*^x";                break;            default:                nString += "?";                break;        }    }        return nString;}